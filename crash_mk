#!/bin/bash

DMESG_ONLY=${DMESG_ONLY:-0}
WDIR=${WDIR:-"$HOME/work"}
rpmdir=$WDIR/releases
debuginfo_dir=$WDIR/debuginfo
vmcore=$1
client_build=0
crash=crash

if [ -f ./crash ]; then
	crash=./crash
fi

die() {
	if [[ -z $1 ]]; then
		echo "crash_mk failed"
	else
		echo "$1"
	fi
	exit 1
}

mkdir -p $rpmdir
mkdir -p $debuginfo_dir

[ -z "$APPD" ] && die "APPD is empty"
[ -z "$vmcore" ] && die "usage: crash_mk VMCORE"
[ $DMESG_ONLY -eq 1 ] || [ -r "$vmcore" ] || die "can't open file $vmcore"

download_kernel_debuginfo() {
	local kernel_rpm=kernel-debuginfo-$kernel_str.rpm
	local url="$APPD/$NEO_ver/job/$NEO_kernel/$kernel_build/artifact/RPMBUILD/$kernel_rpm"
	echo $url
	wget -nc $url -O $rpmdir/$kernel_rpm
	[ $? -ge 2 ] && rm -f $rpmdir/$kernel_rpm && exit 4
	rpm2cpio $rpmdir/$kernel_rpm | cpio -idmv ./usr/lib/debug/lib/modules/$kernel_str/vmlinux
	mv ./usr/lib/debug/lib/modules/$kernel_str/vmlinux $debuginfo_dir/vmlinux-$kernel_str
	rm -rf ./usr
}

get_lustre_ver_from_core() {
	local addr
	local v
	local aa=$(echo "lsmod" | $crash  -s ./vmlinux $vmcore | grep obdclass)
	IFS=' ' read -a addr <<<"$aa"
	echo "addr=$addr"
	[ -z $addr ] && exit 2
	aa=$(echo "module $addr" | $crash  -s ./vmlinux $vmcore | grep module_core)
	IFS=' ' read -a v <<<"$aa"
	local m=${v[2]}
	local module_core=${m:0:18}
	echo "module_core=$module_core"
	local b=$(echo "search -s $module_core  -c \"Build Version\"" | $crash  -s ./vmlinux $vmcore | grep "Build")
	IFS=' ' read -a v <<<"$b"
	build_str=${v[3]}
	echo "Build from vmcore: $build_str"
}

get_kernel_ver_from_dmesg() {
	[ -f  dmesg_$vmcore ] || return
	dmesg_kernel_str=$(grep -m 1 "Linux version" dmesg_$vmcore)
	read -a v <<<"$dmesg_kernel_str"
	echo ${v[4]}
	set_kernel ${v[4]}
}

get_lustre_ver_from_dmesg() {
	[ -f  dmesg_$vmcore ] || return
	bb=$(grep -m 1 "Build Version" dmesg_$vmcore)
	echo $bb
	build_str=${bb#*Version: }
	echo "Build from dmesg: $build_str"
}

download_and_extract() {
	wget -nc $1 -O $2
	[ $? -ge 2 ] && rm -f $2 && exit 3
	rpm2cpio $2 | cpio -idmv
}

download_lustre_1x() {
	echo $build_str
	IFS='-' read -a v <<<"$build_str"
	githash=${v[2]}
	build=${v[1]}
	echo "githash: $githash appdev build: $build"
	build_id=$base_ver.x$X-"$build"_"$kernel_ver"_$githash
	touch $build_id

	lustre_modules=$lustre_mod_prefix-$build_id".x86_64.rpm"
	url="$APPD/$NEO_ver/job/$lustre_ver/$build/artifact/rpmbuild/RPMS/$lustre_modules"
	echo $url
	download_and_extract $url $rpmdir/$lustre_modules
	rm -rf ./usr

	echo "mod -S ./lib/modules/$kernel_str/updates/kernel/fs/lustre" > load_modules
	echo "mod -S ./lib/modules/$kernel_str/updates/kernel/net/lustre" >> load_modules
}

download_lustre() {
	IFS='-' read -a v <<<"$build_str"
	[ -z $githash ] && githash=${v[4]}$extra_git
	build=${v[2]}
	echo "githash: $githash appdev build: $build"
	if [ $NEO_ver = "NEO3.X" ]; then
		if [ $build -ge 238 ]; then
			base_ver="2.7.19.8"
		fi
		if [ $build -ge 315 ]; then
			base_ver="2.7.21"
		fi
		if [ $build -ge 248 ]; then
			lustre_mod_prefix="lustre_ib-debuginfo"
		fi
	fi
	if [ $NEO_ver = "CSL3.0" ]; then
		if [ $build -ge 65 ]; then
			base_ver="2.7.22.1"
		elif [ $build -ge 48 ]; then
			base_ver="2.7.19.12"
		fi
	fi

	if [ $NEO_rel = "CSL3.0_Lustre_opa" ]; then
		if [ $build -ge 27 ]; then
			base_ver="2.7.22.1"
		fi
	fi

	if [ $NEO_ver = "int" ]; then
		build_id=$base_ver"_"$kernel_ver
	elif [ $NEO_ver = "CSL3.1" ]; then
		if [ $client_build -eq 1 ]; then
			build_id=$base_ver"_"$kernel_ver
		else
			build_id=$base_ver"-1.el7.centos.x86_64"
		fi
	elif [ $NEO_ver = "CSL6" ]; then
		build_id="$base_ver"_"$kernel_ver"
	else
		m=$(expr match "$build" '\(^[0-9]*$\)')
		if [ $client_build -eq 1 ] || [ -z $m ]; then
			build_id=$base_ver-"$kernel_ver"_$githash".x86_64"
		else
			build_id=$base_ver.x$X-"$build"_"$kernel_ver"_$githash".x86_64"
		fi
	fi
	touch $build_id
	lustre_modules=$lustre_mod_prefix-$build_id".rpm"
	echo "LMRPM $lustre_modules"

	if [ -f yaml_* ]; then
		if [ $client_build -eq 1 ]; then
			rpm_url=$(cli_pkgs yaml_*)
		else
			rpm_url=$(srv_pkgs yaml_*)
		fi
		[ -z $rpm_url ] || wget -nc $rpm_url/$lustre_modules -O $rpmdir/$lustre_modules
	fi

	url="$APPD/$NEO_ver/job/$lustre_ver/$build/artifact/rpmbuild/RPMS/$lustre_modules"
	echo $url
	download_and_extract $url $rpmdir/$lustre_modules
	if [ $NEO_ver = "CSL6" ]; then
		ldiskfs="kmod-lustre_ib-osd-ldiskfs-debuginfo-"$build_id".rpm"
		download_and_extract $APPD/$ldiskfs $rpmdir/$ldiskfs
	fi
	mv ./usr/lib/debug/lib .
	rm -rf ./usr

	echo "mod -S ./lib/" > load_modules
	if [ $NEO_ver = "CSL6" ]; then
		for f in ./lib/modules/$kernel_str/extra/*/*/*.debug; do
			mv -- "$f" "${f%.ko*}.ko";
		done
	fi
}

yaml_get() {
        xmllint --xpath "$1" $2 | cut -d'^' -f2
}

cli_pkgs() {
	yaml_get "string(//row[contains(@id,'client_packages')])" $1
}

srv_pkgs() {
	yaml_get "string(//row[contains(@id,'server_packages')])" $1
}

set_release() {
	echo $NEO_rel
	case $NEO_rel in
		"NEO1.3")
			NEO_ver="NEO1.3"
			base_ver="2.1.0"
			X="3"
			lustre_mod_prefix="lustre-modules"
			;;
		"Antares")
			NEO_ver="NEO_Antares"
			base_ver="2.1.0"
			X="4"
			lustre_mod_prefix="lustre-modules"
			;;
		"Betazoid")
			NEO_ver="NEO_Betazoid"
			base_ver="2.1.0"
			X="5"
			lustre_mod_prefix="lustre-modules"
			;;
		"Changeling")
			NEO_ver="NEO_Changeling"
			;;
		"Aero")
			NEO_ver="NEO_Aero"
			base_ver="2.5.1"
			X="7"
			kernel_build=$kernel_build_full
			lustre_mod_prefix="lustre-debuginfo"
			;;
		"NEO2.X")
			NEO_ver="NEO2.X"
			base_ver="2.5.1"
			X="8"
			kernel_build=$kernel_build_full
			lustre_mod_prefix="lustre-debuginfo"
			;;
		"NEO3.X")
			NEO_ver="NEO3.X"
			X="8"
			kernel_build=$kernel_build_full
			base_ver="2.7.14"
			lustre_mod_prefix="lustre-debuginfo"
			;;
		"CSL3.0")
			NEO_ver="CSL3.0"
			X="8"
			kernel_build=$kernel_build_full
			base_ver="2.7.19.8"
			lustre_mod_prefix="lustre_ib-debuginfo"
			;;
		"CSL3.0_Lustre_opa")
			NEO_ver="CSL3.0"
			X="8"
			kernel_build=$kernel_build_full
			base_ver="2.7.19.12"
			lustre_mod_prefix="lustre_opa-debuginfo"
			NEO_kernel=$NEO_rel"_Kernel"
			lustre_ver="CSL3.0_Lustre_opa"
			return
			;;
	esac

	lustre_ver=$NEO_rel"_Lustre"
	NEO_kernel=$NEO_rel"_Kernel"
}

set_kernel() {
	[ -z $1 ] && return
        [ $1 == "-" ] && return

	if [ -z $kernel_str ]; then
		kernel_str=$1
		kernel_ver=${kernel_str/-/_}
		echo "kernel: $kernel_ver"
		set_release
	elif [ $kernel_str != $1 ]; then
		if expr match $kernel_str "^$1" ; then
			echo "partial new kernel : $kernel_str $1"
		else
			die "new kernel differs !!! $kernel_str $1"
		fi
	fi
	case $NEO_rel in
		"NEO1.3")
			return
			;;
		"Antares")
			return
			;;
		"Betazoid")
			return
			;;
	esac
	IFS='.' read -a v <<< $kernel_str
	case ${v[5]} in
		"el6" | "el7")
			lustre_mod_prefix="lustre-client-debuginfo"
			client_build=1
			;;
		el8_*)
			lustre_mod_prefix="kmod-lustre-client-debuginfo"
			client_build=1
			;;

	esac
}

parse() {
	[ $DMESG_ONLY -eq 1 ] && exit

	echo "epython ../pycrashext/regext.py" >> load_modules
	echo "epython ../lustredbg/regext.py" >> load_modules

	parse_vmcore $vmcore
	exit
}

guess_release_from_kernel() {
	IFS='.' read -a v <<<"$kernel_str"
	kernel_build_full=${v[7]}
	echo "full:" $kernel_build_full
	echo ${v[5]}
	if [ ${v[5]} == "x3" ]; then
		NEO_rel="NEO3.X"
	else
		case ${v[6]} in
			"1")
				NEO_rel="Aero"
				;;
			"2")
				NEO_rel="NEO2.X"
				;;
			*)
				kernel_build=${kernel_build_full:2:2}

				case ${kernel_build_full:0:2} in
					"40")
						NEO_rel="NEO1.3"
						client_build=0
						;;
					"41")
						NEO_rel="Antares"
						client_build=0
						;;
					"42")
						NEO_rel="Betazoid"
						client_build=0
						;;
					"43")
						NEO_rel="Changeling"
						base_ver="2.1.0"
						X="5"
						kernel_build="43"
						;;
					"52")
						NEO_rel="Changeling"
						base_ver="2.5.1"
						lustre_mod_prefix="lustre-debuginfo"
						X="5"
						kernel_build="52"
						;;
					*)
						NEO_rel="Changeling"
						base_ver="2.5.1"
						X="6"
						lustre_mod_prefix="lustre-debuginfo"
						extra_git="f"
						kernel_build=${kernel_build_full:0:2}
						;;
				esac
		esac
	fi

	set_release
}

if [ -d ./lustre_kos ]; then
	echo "mod -S ./lustre_kos" > load_modules
	parse
fi

if [ $DMESG_ONLY -eq 0 ]; then
	set_kernel $(crash --osrelease $vmcore)
	rm -f vmlinux
	ln -s $debuginfo_dir/vmlinux-$kernel_str ./vmlinux

	guess_release_from_kernel
else
	get_kernel_ver_from_dmesg
fi

[ -z $build_str ] && get_lustre_ver_from_dmesg

[ $DMESG_ONLY -eq 1 ] && [ -z $build_str ] &&
	echo "Can't find lustre version from dmesg." && exit 0

[ $DMESG_ONLY -eq 1 ] || [ -e vmlinux ] || download_kernel_debuginfo

[ -z $build_str ] && dump_dmesg $vmcore
[ -z $build_str ] && get_lustre_ver_from_dmesg
[ -z $build_str ] && get_lustre_ver_from_core

echo $build_str

githash=`expr match "$build_str" '.*-\(g.......\)-'`
IFS='-' read -a v <<<"$build_str"

echo v1=${v[1]}
case ${v[1]} in
	[0-9][0-9][0-9])
		set_kernel ${v[4]}-${v[5]}
		if [ $DMESG_ONLY -eq 1 ]; then
			guess_release_from_kernel
		fi
		;;
	"Aero_Lustre")
		NEO_rel="Aero"
		base_ver="2.5.1"
		X="7"
		lustre_mod_prefix="lustre-debuginfo"
		set_kernel ${v[6]}-${v[7]}
		;;
	"Changeling_Lustre")
		NEO_rel="Changeling"
		base_ver="2.5.1"
		X="6"
		lustre_mod_prefix="lustre-debuginfo"
		set_kernel ${v[6]}-${v[7]}
		;;
	"CS_2.0")
		NEO_rel="Changeling"
		base_ver="2.5.1"
		lustre_mod_prefix="lustre-debuginfo"
		X="6"
		if [ -z ${v[6]} ]; then
			set_kernel ${v[4]}-${v[5]}
		else
			set_kernel ${v[5]}-${v[6]}
		fi
		;;
	"CS_2.0.0")
		NEO_rel="Changeling"
		base_ver="2.5.1"
		lustre_mod_prefix="lustre-debuginfo"
		set_kernel ${v[5]}-${v[6]}
		;;
	"CS_2.1")
		NEO_rel="Aero"
		base_ver="2.5.1"
		lustre_mod_prefix="lustre-client-debuginfo"
		client_build=1
#		set_kernel ${v[5]}-${v[6]}
		lustre_ver="Aero_Lustre-client"
		;;
	"CS_2.1.0")
		NEO_rel="Aero"
		base_ver="2.5.1"
		lustre_mod_prefix="lustre-debuginfo"
		set_kernel ${v[5]}-${v[6]}
		;;
	"CSL_3.0.0")
		base_ver="2.7.19.8"
		set_kernel ${v[5]}-${v[6]}
		;;
	"CSL3.0_Lustre")
		NEO_rel="CSL3.0"
		set_kernel ${v[6]}-${v[7]}
		set_release
		;;
	"CSL3.0_Lustre_opa")
		NEO_rel="CSL3.0_Lustre_opa"
		set_kernel ${v[6]}-${v[7]}
		set_release
		;;
	"NEO3.X_Lustre")
		NEO_rel="NEO3.X"
		set_kernel ${v[6]}-${v[7]}
		;;
esac

echo v0=${v[0]}
case ${v[0]} in
	"v2_7_0_0")
		base_ver="2.7.14"
		lustre_mod_prefix="lustre-debuginfo"
		set_kernel ${v[3]}-${v[4]}
		;;
	"2.7.0")
		base_ver="2.7.18.4"
		lustre_mod_prefix="lustre-debuginfo"
		set_kernel ${v[3]}-${v[4]}
		;;
	2.9.*)
		base_ver=${v[0]}
		lustre_mod_prefix="lustre-client-debuginfo"
		NEO_ver="master"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		;;
	2.11.0.*_cray*)
		base_ver=${v[0]}
		NEO_ver="int"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		if [ $client_build -eq 1 ]; then
			lustre_mod_prefix="lustre-client-debuginfo"
		else
			lustre_mod_prefix="lustre_ib-debuginfo"
		fi
		;;
	2.11.*)
		base_ver=${v[0]}
		NEO_ver="CSL3.1"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		if [ $client_build -eq 0 ]; then
			lustre_mod_prefix="lustre_ib-debuginfo"
		fi
		;;
        2.12.[0-4]*)
		echo "2.12.0-4"
		base_ver=${v[0]}
		NEO_ver="CSL3.1"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		if [ $client_build -eq 0 ]; then
			lustre_mod_prefix="lustre_ib-debuginfo"
		fi
		;;
	2.12.6.*)
		echo "2.12.6"
		base_ver=${v[0]}
		NEO_ver="CSL6"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		if [ $client_build -eq 1 ]; then
			lustre_mod_prefix="kmod-lustre-client-debuginfo"
		else
			lustre_mod_prefix="kmod-lustre_ib-debuginfo"
		fi
		;;
        2.12*_cray*)
		echo "2.12.cray"
		base_ver=${v[0]}
		NEO_ver="int"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		if [ $client_build -eq 1 ]; then
			lustre_mod_prefix="lustre-client-debuginfo"
		else
			lustre_mod_prefix="lustre_ib-debuginfo"
		fi
		;;
	2.15.*)
		base_ver=${v[0]}
		NEO_ver="CSL6"
		githash=`expr match "$base_ver" '.*_\(g.......\)'`
		if [ $client_build -eq 1 ]; then
			lustre_mod_prefix="kmod-lustre-client-debuginfo"
		else
			lustre_mod_prefix="kmod-lustre_ib-debuginfo"
		fi
		;;
esac

[ -z $kernel_str ] && die "kernel_str isn't found !"
[ -z $base_ver ] && die "base_ver isn't found !"

echo "client_build=$client_build"
echo "base_ver=$base_ver"

if [[ -n $2 ]]; then
	echo "Lustre rpm: $2"
	echo "mod -S ./lib/" > load_modules
	rpm2cpio $2 | cpio -idmv
	mv ./usr/lib/debug/lib .
	rm -rf ./usr
        if [ $NEO_ver = "CSL6" ]; then
		for f in ./lib/modules/$kernel_str/extra/*/*/*.debug; do
			mv -- "$f" "${f%.ko*}.ko";
		done
	fi
	parse
	exit
fi

if [ $base_ver = "2.1.0" ]; then
	download_lustre_1x
else
	download_lustre
fi

parse
